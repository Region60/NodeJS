
Устанавливаем пакет express-session. Подключаем и начтраиваем его в index.js
Создаем папку, где будем хранить middleware. В ней создаем файл variables.js. Далее создаем функцию, которая
будет добалвять еще дно поле для респонса и подключаем ее в index.js после начала сессии. В auth.js создаем рооутер
который будет который будет присваивать ТРУ полю isAuthenticated и делать редирект на главную страницу.
В файле навбар создаем условие для полей которые не должны отображаться, если пользователь не зарегистрирован

СОХРАНЕНИЕ СЕССИИ
Устанавливаем пакет connect-mongodb-session. ОН  нужен для синхронизации express-session  с БД монгодб.
Подключаем пакет в index.js после подключения сессии

ЗАЩИТА РОУТОВ.
Создаем миддлвеер в папке middleware. Там создаем функцию которая проверяет значение isAuthenticated.
Добавляем в роутах auth для тех которые хотим защитить

В компоненте card  у метода post (/add) не работает метод req.user.addToCard(course). Потому что, аддтукарт не является методом от
 монгуус. Для этого создаем еще один миддлвеер
user.

ШИФРОВАНИЕ
Устанавливаем пакет для шифрования bcryptjs и подключаем его в в роутах auth.js
Перед отправкой юзера при регистрации, создаем переменную и присваиваем ей закешированный пароль,
 затем при формировании объекта юзер передаем праметром пароль которому присваиваем полученнное значение при кеш-ии.
 Так же добавляем проверку пароля в логине

Устанавливаем пакет csurf и подключаем его в index.js после подключения сессии. в компоненте variables добавляем новую
переменную res.locals.csrf = req.csrfToken(). И редактируем все компоненты где есть формы,
 добавляя необходимые инпуты <input type="hidden" name="_csrf" value="{{csrf}}"> (блок5,видео10)

Вывод ошибок.
Устанавливаем пакет connect-flash  и подключаем его в index.js/ И подключаем его в index.js после добавления сессии.
В роуте  '/register' добавляем метод flash с заданными параметрами. А в методе get /login добавляем свойство error
И добавляем условия во фронт:
{{#if error}}
    <p class="'alert">{{error}}</p>
{{/if}}